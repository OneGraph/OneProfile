// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var OnegraphAuth = require("onegraph-auth");
var Utils$ReactTemplate = require("./utils.bs.js");
var Chrome$ReactTemplate = require("./chrome.bs.js");
var Config$ReactTemplate = require("./config.bs.js");
var Example$ReactTemplate = require("./example.bs.js");

var component = ReasonReact.reducerComponent("Page");

function make(forcedVideoId, _) {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      try {
        Chrome$ReactTemplate.Tabs[/* getActive */0]((function (activeTab) {
                console.log("Active tab:", activeTab);
                return Curry._1(self[/* send */4], /* SetUrl */Block.__(1, [Js_primitive.null_undefined_to_opt(activeTab.url)]));
              }));
      }
      catch (exn){
        if (forcedVideoId) {
          Curry._1(self[/* send */4], /* SetVideoId */Block.__(0, [forcedVideoId[0]]));
        }
        
      }
      self[/* state */2][/* twitterAuth */1].isLoggedIn().then((function (isLoggedIn) {
              console.log("User is logged in to twitter: ", isLoggedIn);
              var isLoggedIn$1 = +isLoggedIn;
              console.log("User is logged in to twitter2...: ", isLoggedIn$1);
              Curry._1(self[/* send */4], /* SetTwitterLoggedIn */Block.__(3, [isLoggedIn$1]));
              if (isLoggedIn$1 !== 0) {
                return Promise.resolve(isLoggedIn$1);
              } else {
                console.log("Forcing twitter login");
                return self[/* state */2][/* twitterAuth */1].login().then((function () {
                              return self[/* state */2][/* twitterAuth */1].isLoggedIn().then((function (isLoggedIn) {
                                            var isLoggedIn$1 = +isLoggedIn;
                                            console.log("User is logged in to twitter after login: ", isLoggedIn$1);
                                            Curry._1(self[/* send */4], /* SetTwitterLoggedIn */Block.__(3, [isLoggedIn$1]));
                                            return Promise.resolve(isLoggedIn$1);
                                          }));
                            }));
              }
            }));
      self[/* state */2][/* githubAuth */0].isLoggedIn().then((function (isLoggedIn) {
              var isLoggedIn$1 = +isLoggedIn;
              console.log("User is logged in to github: ", isLoggedIn$1);
              Curry._1(self[/* send */4], /* SetGithubLoggedIn */Block.__(2, [isLoggedIn$1]));
              if (isLoggedIn$1 !== 0) {
                return Promise.resolve(isLoggedIn$1);
              } else {
                return self[/* state */2][/* githubAuth */0].login().then((function (isLoggedIn) {
                              Curry._1(self[/* send */4], /* SetGithubLoggedIn */Block.__(2, [isLoggedIn]));
                              return Promise.resolve(isLoggedIn);
                            }));
              }
            }));
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      var state = param[/* state */2];
      var match = state[/* isGithubLoggedIn */5];
      var match$1 = state[/* failed */4];
      var match$2 = state[/* videoId */2];
      if (match$1 !== 0) {
        return Utils$ReactTemplate.s("Not on a Youtube site");
      } else if (match$2) {
        if (match !== 0) {
          return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, Example$ReactTemplate.make(match$2[0], /* array */[])));
        } else {
          return Utils$ReactTemplate.s("Please log with Github");
        }
      } else {
        return Utils$ReactTemplate.s("No video detected: " + Utils$ReactTemplate.$$default("unknown url", state[/* currentUrl */3]));
      }
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* githubAuth */new OnegraphAuth.default({
                    service: "github",
                    appId: Config$ReactTemplate.appId,
                    oauthFinishPath: "/src/popup.html"
                  }),
              /* twitterAuth */new OnegraphAuth.default({
                    service: "twitter",
                    appId: Config$ReactTemplate.appId,
                    oauthFinishPath: "/src/popup.html"
                  }),
              /* videoId : None */0,
              /* currentUrl : None */0,
              /* failed : false */0,
              /* isGithubLoggedIn : false */0,
              /* isTwitterLoggedIn : false */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        var newrecord = state.slice();
        return /* Update */Block.__(0, [(newrecord[/* failed */4] = /* true */1, newrecord)]);
      } else {
        switch (action.tag | 0) {
          case 0 : 
              var newrecord$1 = state.slice();
              return /* Update */Block.__(0, [(newrecord$1[/* videoId */2] = /* Some */[action[0]], newrecord$1)]);
          case 1 : 
              var url = action[0];
              if (url) {
                var url$1 = url[0];
                var match = url$1.match((/v=([a-zA-Z0-9-_]+)/));
                var videoId = match !== null ? /* Some */[Caml_array.caml_array_get(match, 1)] : /* None */0;
                return /* Update */Block.__(0, [/* record */[
                            /* githubAuth */state[/* githubAuth */0],
                            /* twitterAuth */state[/* twitterAuth */1],
                            /* videoId */videoId,
                            /* currentUrl : Some */[url$1],
                            /* failed */state[/* failed */4],
                            /* isGithubLoggedIn */state[/* isGithubLoggedIn */5],
                            /* isTwitterLoggedIn */state[/* isTwitterLoggedIn */6]
                          ]]);
              } else {
                var newrecord$2 = state.slice();
                return /* Update */Block.__(0, [(newrecord$2[/* currentUrl */3] = /* None */0, newrecord$2)]);
              }
              break;
          case 2 : 
              var newrecord$3 = state.slice();
              return /* Update */Block.__(0, [(newrecord$3[/* isGithubLoggedIn */5] = action[0], newrecord$3)]);
          case 3 : 
              var newrecord$4 = state.slice();
              return /* Update */Block.__(0, [(newrecord$4[/* isTwitterLoggedIn */6] = action[0], newrecord$4)]);
          
        }
      }
    });
  return newrecord;
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
