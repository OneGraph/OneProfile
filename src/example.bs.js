// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Printf = require("bs-platform/lib/js/printf.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Utils$ReactTemplate = require("./utils.bs.js");
var Client$ReactTemplate = require("./client.bs.js");

function $$default(value, option) {
  if (option) {
    return option[0];
  } else {
    return value;
  }
}

var Graphql_error = Caml_exceptions.create("Example-ReactTemplate.FindOtherVideosQuery.Graphql_error");

var query = "query findOtherVideos($youtubeVideoId: String!, $recentRepoCount: Int!)  {\neventil  {\npresentation(youtube_id: $youtubeVideoId)  {\nuser  {\nname  \npresentations  {\nevent  {\nname  \n}\ndraft  {\ntitle  \n}\nvideo_url  \nyoutubeVideo  {\nstatistics  {\nviewCount  \nlikeCount  \n}\n}\n}\nprofile  {\ntwitter  \ntwitterTimeline  {\ntweets  {\nidStr  \ncreatedAt  \ntext  \n}\n}\ngithub  \ngitHubUser  {\nlogin  \nemail  \nwebsiteUrl  \nfollowers  {\ntotalCount  \n}\nrepositories(first: $recentRepoCount, orderBy: {field: PUSHED_AT, direction: DESC})  {\nnodes  {\ndescription  \nname  \nurl  \n}\n}\n}\n}\n}\n}\n}\n}";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match) {
    var value$1 = match[0]["eventil"];
    var match$1 = Js_json.decodeNull(value$1);
    var tmp;
    if (match$1) {
      tmp = /* None */0;
    } else {
      var match$2 = Js_json.decodeObject(value$1);
      var tmp$1;
      if (match$2) {
        var value$2 = match$2[0]["presentation"];
        var match$3 = Js_json.decodeNull(value$2);
        var tmp$2;
        if (match$3) {
          tmp$2 = /* None */0;
        } else {
          var match$4 = Js_json.decodeObject(value$2);
          var tmp$3;
          if (match$4) {
            var value$3 = match$4[0]["user"];
            var match$5 = Js_json.decodeObject(value$3);
            var tmp$4;
            if (match$5) {
              var value$4 = match$5[0];
              var value$5 = value$4["name"];
              var match$6 = Js_json.decodeNull(value$5);
              var tmp$5;
              if (match$6) {
                tmp$5 = /* None */0;
              } else {
                var match$7 = Js_json.decodeString(value$5);
                var tmp$6;
                if (match$7) {
                  tmp$6 = match$7[0];
                } else {
                  throw Graphql_error;
                }
                tmp$5 = /* Some */[tmp$6];
              }
              var value$6 = value$4["presentations"];
              var match$8 = Js_json.decodeArray(value$6);
              var tmp$7;
              if (match$8) {
                tmp$7 = match$8[0].map((function (value) {
                        var match = Js_json.decodeObject(value);
                        if (match) {
                          var value$1 = match[0];
                          var value$2 = value$1["event"];
                          var match$1 = Js_json.decodeObject(value$2);
                          var tmp;
                          if (match$1) {
                            var value$3 = match$1[0]["name"];
                            var match$2 = Js_json.decodeNull(value$3);
                            var tmp$1;
                            if (match$2) {
                              tmp$1 = /* None */0;
                            } else {
                              var match$3 = Js_json.decodeString(value$3);
                              var tmp$2;
                              if (match$3) {
                                tmp$2 = match$3[0];
                              } else {
                                throw Graphql_error;
                              }
                              tmp$1 = /* Some */[tmp$2];
                            }
                            tmp = {
                              name: tmp$1
                            };
                          } else {
                            throw Graphql_error;
                          }
                          var value$4 = value$1["draft"];
                          var match$4 = Js_json.decodeObject(value$4);
                          var tmp$3;
                          if (match$4) {
                            var value$5 = match$4[0]["title"];
                            var match$5 = Js_json.decodeNull(value$5);
                            var tmp$4;
                            if (match$5) {
                              tmp$4 = /* None */0;
                            } else {
                              var match$6 = Js_json.decodeString(value$5);
                              var tmp$5;
                              if (match$6) {
                                tmp$5 = match$6[0];
                              } else {
                                throw Graphql_error;
                              }
                              tmp$4 = /* Some */[tmp$5];
                            }
                            tmp$3 = {
                              title: tmp$4
                            };
                          } else {
                            throw Graphql_error;
                          }
                          var value$6 = value$1["video_url"];
                          var match$7 = Js_json.decodeNull(value$6);
                          var tmp$6;
                          if (match$7) {
                            tmp$6 = /* None */0;
                          } else {
                            var match$8 = Js_json.decodeString(value$6);
                            var tmp$7;
                            if (match$8) {
                              tmp$7 = match$8[0];
                            } else {
                              throw Graphql_error;
                            }
                            tmp$6 = /* Some */[tmp$7];
                          }
                          var value$7 = value$1["youtubeVideo"];
                          var match$9 = Js_json.decodeNull(value$7);
                          var tmp$8;
                          if (match$9) {
                            tmp$8 = /* None */0;
                          } else {
                            var match$10 = Js_json.decodeObject(value$7);
                            var tmp$9;
                            if (match$10) {
                              var value$8 = match$10[0]["statistics"];
                              var match$11 = Js_json.decodeNull(value$8);
                              var tmp$10;
                              if (match$11) {
                                tmp$10 = /* None */0;
                              } else {
                                var match$12 = Js_json.decodeObject(value$8);
                                var tmp$11;
                                if (match$12) {
                                  var value$9 = match$12[0];
                                  var value$10 = value$9["viewCount"];
                                  var match$13 = Js_json.decodeNumber(value$10);
                                  var tmp$12;
                                  if (match$13) {
                                    tmp$12 = match$13[0] | 0;
                                  } else {
                                    throw Graphql_error;
                                  }
                                  var value$11 = value$9["likeCount"];
                                  var match$14 = Js_json.decodeNumber(value$11);
                                  var tmp$13;
                                  if (match$14) {
                                    tmp$13 = match$14[0] | 0;
                                  } else {
                                    throw Graphql_error;
                                  }
                                  tmp$11 = {
                                    viewCount: tmp$12,
                                    likeCount: tmp$13
                                  };
                                } else {
                                  throw Graphql_error;
                                }
                                tmp$10 = /* Some */[tmp$11];
                              }
                              tmp$9 = {
                                statistics: tmp$10
                              };
                            } else {
                              throw Graphql_error;
                            }
                            tmp$8 = /* Some */[tmp$9];
                          }
                          return {
                                  event: tmp,
                                  draft: tmp$3,
                                  video_url: tmp$6,
                                  youtubeVideo: tmp$8
                                };
                        } else {
                          throw Graphql_error;
                        }
                      }));
              } else {
                throw Graphql_error;
              }
              var value$7 = value$4["profile"];
              var match$9 = Js_json.decodeObject(value$7);
              var tmp$8;
              if (match$9) {
                var value$8 = match$9[0];
                var value$9 = value$8["twitter"];
                var match$10 = Js_json.decodeNull(value$9);
                var tmp$9;
                if (match$10) {
                  tmp$9 = /* None */0;
                } else {
                  var match$11 = Js_json.decodeString(value$9);
                  var tmp$10;
                  if (match$11) {
                    tmp$10 = match$11[0];
                  } else {
                    throw Graphql_error;
                  }
                  tmp$9 = /* Some */[tmp$10];
                }
                var value$10 = value$8["twitterTimeline"];
                var match$12 = Js_json.decodeNull(value$10);
                var tmp$11;
                if (match$12) {
                  tmp$11 = /* None */0;
                } else {
                  var match$13 = Js_json.decodeObject(value$10);
                  var tmp$12;
                  if (match$13) {
                    var value$11 = match$13[0]["tweets"];
                    var match$14 = Js_json.decodeArray(value$11);
                    var tmp$13;
                    if (match$14) {
                      tmp$13 = match$14[0].map((function (value) {
                              var match = Js_json.decodeObject(value);
                              if (match) {
                                var value$1 = match[0];
                                var value$2 = value$1["idStr"];
                                var match$1 = Js_json.decodeString(value$2);
                                var tmp;
                                if (match$1) {
                                  tmp = match$1[0];
                                } else {
                                  throw Graphql_error;
                                }
                                var value$3 = value$1["createdAt"];
                                var match$2 = Js_json.decodeString(value$3);
                                var tmp$1;
                                if (match$2) {
                                  tmp$1 = match$2[0];
                                } else {
                                  throw Graphql_error;
                                }
                                var value$4 = value$1["text"];
                                var match$3 = Js_json.decodeString(value$4);
                                var tmp$2;
                                if (match$3) {
                                  tmp$2 = match$3[0];
                                } else {
                                  throw Graphql_error;
                                }
                                return {
                                        idStr: tmp,
                                        createdAt: tmp$1,
                                        text: tmp$2
                                      };
                              } else {
                                throw Graphql_error;
                              }
                            }));
                    } else {
                      throw Graphql_error;
                    }
                    tmp$12 = {
                      tweets: tmp$13
                    };
                  } else {
                    throw Graphql_error;
                  }
                  tmp$11 = /* Some */[tmp$12];
                }
                var value$12 = value$8["github"];
                var match$15 = Js_json.decodeNull(value$12);
                var tmp$14;
                if (match$15) {
                  tmp$14 = /* None */0;
                } else {
                  var match$16 = Js_json.decodeString(value$12);
                  var tmp$15;
                  if (match$16) {
                    tmp$15 = match$16[0];
                  } else {
                    throw Graphql_error;
                  }
                  tmp$14 = /* Some */[tmp$15];
                }
                var value$13 = value$8["gitHubUser"];
                var match$17 = Js_json.decodeNull(value$13);
                var tmp$16;
                if (match$17) {
                  tmp$16 = /* None */0;
                } else {
                  var match$18 = Js_json.decodeObject(value$13);
                  var tmp$17;
                  if (match$18) {
                    var value$14 = match$18[0];
                    var value$15 = value$14["login"];
                    var match$19 = Js_json.decodeString(value$15);
                    var tmp$18;
                    if (match$19) {
                      tmp$18 = match$19[0];
                    } else {
                      throw Graphql_error;
                    }
                    var value$16 = value$14["email"];
                    var match$20 = Js_json.decodeString(value$16);
                    var tmp$19;
                    if (match$20) {
                      tmp$19 = match$20[0];
                    } else {
                      throw Graphql_error;
                    }
                    var value$17 = value$14["websiteUrl"];
                    var match$21 = Js_json.decodeNull(value$17);
                    var tmp$20;
                    if (match$21) {
                      tmp$20 = /* None */0;
                    } else {
                      var match$22 = Js_json.decodeString(value$17);
                      var tmp$21;
                      if (match$22) {
                        tmp$21 = match$22[0];
                      } else {
                        throw Graphql_error;
                      }
                      tmp$20 = /* Some */[tmp$21];
                    }
                    var value$18 = value$14["followers"];
                    var match$23 = Js_json.decodeObject(value$18);
                    var tmp$22;
                    if (match$23) {
                      var value$19 = match$23[0]["totalCount"];
                      var match$24 = Js_json.decodeNumber(value$19);
                      var tmp$23;
                      if (match$24) {
                        tmp$23 = match$24[0] | 0;
                      } else {
                        throw Graphql_error;
                      }
                      tmp$22 = {
                        totalCount: tmp$23
                      };
                    } else {
                      throw Graphql_error;
                    }
                    var value$20 = value$14["repositories"];
                    var match$25 = Js_json.decodeObject(value$20);
                    var tmp$24;
                    if (match$25) {
                      var value$21 = match$25[0]["nodes"];
                      var match$26 = Js_json.decodeNull(value$21);
                      var tmp$25;
                      if (match$26) {
                        tmp$25 = /* None */0;
                      } else {
                        var match$27 = Js_json.decodeArray(value$21);
                        var tmp$26;
                        if (match$27) {
                          tmp$26 = match$27[0].map((function (value) {
                                  var match = Js_json.decodeNull(value);
                                  if (match) {
                                    return /* None */0;
                                  } else {
                                    var match$1 = Js_json.decodeObject(value);
                                    var tmp;
                                    if (match$1) {
                                      var value$1 = match$1[0];
                                      var value$2 = value$1["description"];
                                      var match$2 = Js_json.decodeNull(value$2);
                                      var tmp$1;
                                      if (match$2) {
                                        tmp$1 = /* None */0;
                                      } else {
                                        var match$3 = Js_json.decodeString(value$2);
                                        var tmp$2;
                                        if (match$3) {
                                          tmp$2 = match$3[0];
                                        } else {
                                          throw Graphql_error;
                                        }
                                        tmp$1 = /* Some */[tmp$2];
                                      }
                                      var value$3 = value$1["name"];
                                      var match$4 = Js_json.decodeString(value$3);
                                      var tmp$3;
                                      if (match$4) {
                                        tmp$3 = match$4[0];
                                      } else {
                                        throw Graphql_error;
                                      }
                                      var value$4 = value$1["url"];
                                      var match$5 = Js_json.decodeString(value$4);
                                      var tmp$4;
                                      if (match$5) {
                                        tmp$4 = match$5[0];
                                      } else {
                                        throw Graphql_error;
                                      }
                                      tmp = {
                                        description: tmp$1,
                                        name: tmp$3,
                                        url: tmp$4
                                      };
                                    } else {
                                      throw Graphql_error;
                                    }
                                    return /* Some */[tmp];
                                  }
                                }));
                        } else {
                          throw Graphql_error;
                        }
                        tmp$25 = /* Some */[tmp$26];
                      }
                      tmp$24 = {
                        nodes: tmp$25
                      };
                    } else {
                      throw Graphql_error;
                    }
                    tmp$17 = {
                      login: tmp$18,
                      email: tmp$19,
                      websiteUrl: tmp$20,
                      followers: tmp$22,
                      repositories: tmp$24
                    };
                  } else {
                    throw Graphql_error;
                  }
                  tmp$16 = /* Some */[tmp$17];
                }
                tmp$8 = {
                  twitter: tmp$9,
                  twitterTimeline: tmp$11,
                  github: tmp$14,
                  gitHubUser: tmp$16
                };
              } else {
                throw Graphql_error;
              }
              tmp$4 = {
                name: tmp$5,
                presentations: tmp$7,
                profile: tmp$8
              };
            } else {
              throw Graphql_error;
            }
            tmp$3 = {
              user: tmp$4
            };
          } else {
            throw Graphql_error;
          }
          tmp$2 = /* Some */[tmp$3];
        }
        tmp$1 = {
          presentation: tmp$2
        };
      } else {
        throw Graphql_error;
      }
      tmp = /* Some */[tmp$1];
    }
    return {
            eventil: tmp
          };
  } else {
    throw Graphql_error;
  }
}

function json_of_optional(encoder, value) {
  if (value) {
    return Curry._1(encoder, value[0]);
  } else {
    return null;
  }
}

function json_of_array(encoder, value) {
  return value.map(Curry.__1(encoder));
}

function json_of_String(value) {
  return value;
}

function json_of_Int(value) {
  return value;
}

function make(youtubeVideoId, recentRepoCount, _) {
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "youtubeVideoId",
                  youtubeVideoId
                ],
                /* :: */[
                  /* tuple */[
                    "recentRepoCount",
                    recentRepoCount
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var youtubeVideoId = variables.youtubeVideoId;
  var recentRepoCount = variables.recentRepoCount;
  return {
          query: query,
          variables: Js_dict.fromList(/* :: */[
                /* tuple */[
                  "youtubeVideoId",
                  youtubeVideoId
                ],
                /* :: */[
                  /* tuple */[
                    "recentRepoCount",
                    recentRepoCount
                  ],
                  /* [] */0
                ]
              ]),
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var FindOtherVideosQuery = /* module */[
  /* Graphql_error */Graphql_error,
  /* query */query,
  /* parse */parse,
  /* json_of_optional */json_of_optional,
  /* json_of_array */json_of_array,
  /* json_of_String */json_of_String,
  /* json_of_Int */json_of_Int,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

function viewCountOfPresentation(presentation) {
  var match = presentation.youtubeVideo;
  if (match) {
    var match$1 = match[0].statistics;
    if (match$1) {
      return match$1[0].viewCount;
    } else {
      return 0;
    }
  } else {
    return 0;
  }
}

function renderPresentation(presentation) {
  var title = $$default("No title", presentation.draft.title);
  var eventName = $$default("No event name", presentation.event.name);
  var match = presentation.video_url;
  var tmp;
  if (match) {
    var match$1 = presentation.youtubeVideo;
    var stats;
    if (match$1) {
      var match$2 = match$1[0].statistics;
      if (match$2) {
        var stats$1 = match$2[0];
        stats = /* Some */[/* tuple */[
            stats$1.viewCount,
            stats$1.likeCount
          ]];
      } else {
        stats = /* None */0;
      }
    } else {
      stats = /* None */0;
    }
    var tmp$1;
    if (stats) {
      var match$3 = stats[0];
      tmp$1 = Curry._2(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    " - ",
                    /* Int */Block.__(4, [
                        /* Int_d */0,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* String_literal */Block.__(11, [
                            " views / ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " likes",
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ])
                  ]),
                " - %d views / %d likes"
              ]), match$3[0], match$3[1]);
    } else {
      tmp$1 = "";
    }
    tmp = React.createElement("span", undefined, React.createElement("a", {
              href: match[0],
              target: "_blank"
            }, Utils$ReactTemplate.s(title)), React.createElement("span", undefined, Utils$ReactTemplate.s(tmp$1)));
  } else {
    tmp = Utils$ReactTemplate.s(title);
  }
  return React.createElement("li", undefined, Utils$ReactTemplate.s(eventName + ": "), tmp);
}

var component = ReasonReact.reducerComponent("Core");

function make$1(videoId, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var videosQuery = make(videoId, 5, /* () */0);
      return ReasonReact.element(/* None */0, /* None */0, Curry._2(Client$ReactTemplate.Instance[/* Query */1][/* make */2], videosQuery, (function (response, parse) {
                        if (typeof response === "number") {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s("Loading"));
                        } else if (response.tag) {
                          return React.createElement("div", undefined, Utils$ReactTemplate.s(response[0]));
                        } else {
                          var result = Curry._1(parse, response[0]);
                          var match = result.eventil;
                          if (match) {
                            var match$1 = match[0].presentation;
                            if (match$1) {
                              var user = match$1[0].user;
                              var presentations = user.presentations;
                              var gitHubUser = user.profile.gitHubUser;
                              var tmp;
                              if (gitHubUser) {
                                var githubUser = gitHubUser[0];
                                var match$2 = githubUser.repositories.nodes;
                                tmp = React.createElement("div", undefined, React.createElement("hr", undefined), React.createElement("h3", undefined, Utils$ReactTemplate.s("Github: " + (githubUser.login + ("(" + (githubUser.email + ") - most recently active repositories:"))))), match$2 ? React.createElement("ul", undefined, $$Array.map((function (optionalNode) {
                                                  var tmp;
                                                  if (optionalNode) {
                                                    var node = optionalNode[0];
                                                    var match = node.description;
                                                    tmp = React.createElement("span", undefined, React.createElement("a", {
                                                              href: node.url,
                                                              target: "_blank"
                                                            }, Utils$ReactTemplate.s(node.name)), match ? Utils$ReactTemplate.s(" - " + match[0]) : Utils$ReactTemplate.s(""));
                                                  } else {
                                                    tmp = null;
                                                  }
                                                  return React.createElement("li", undefined, tmp);
                                                }), match$2[0])) : null);
                              } else {
                                tmp = null;
                              }
                              var twitterTimeline = user.profile.twitterTimeline;
                              var screenName = user.profile.twitter;
                              return React.createElement("div", {
                                          style: {
                                            minWidth: "600px"
                                          }
                                        }, React.createElement("h1", undefined, Utils$ReactTemplate.s("Talks by " + $$default("No name", user.name))), React.createElement("ul", undefined, $$Array.map(renderPresentation, $$Array.of_list(List.sort((function (a, b) {
                                                            return viewCountOfPresentation(b) - viewCountOfPresentation(a) | 0;
                                                          }), $$Array.to_list(presentations))))), tmp, twitterTimeline ? React.createElement("div", undefined, React.createElement("hr", undefined), React.createElement("h3", undefined, Utils$ReactTemplate.s("Twitter: 5 most recent tweets")), React.createElement("ul", undefined, $$Array.map((function (tweet) {
                                                          return React.createElement("li", undefined, React.createElement("span", undefined, React.createElement("a", {
                                                                              href: Curry._2(Printf.sprintf(/* Format */[
                                                                                        /* String_literal */Block.__(11, [
                                                                                            "https://twitter.com/",
                                                                                            /* String */Block.__(2, [
                                                                                                /* No_padding */0,
                                                                                                /* String_literal */Block.__(11, [
                                                                                                    "/status/",
                                                                                                    /* String */Block.__(2, [
                                                                                                        /* No_padding */0,
                                                                                                        /* End_of_format */0
                                                                                                      ])
                                                                                                  ])
                                                                                              ])
                                                                                          ]),
                                                                                        "https://twitter.com/%s/status/%s"
                                                                                      ]), $$default("", screenName), tweet.idStr),
                                                                              target: "_blank"
                                                                            }, Utils$ReactTemplate.s(tweet.createdAt)), Utils$ReactTemplate.s(tweet.text)));
                                                        }), twitterTimeline[0].tweets))) : null);
                            } else {
                              return React.createElement("div", undefined, Utils$ReactTemplate.s("No other talks found from this video"));
                            }
                          } else {
                            return React.createElement("div", undefined, Utils$ReactTemplate.s("No eventil response, perhaps some error?"));
                          }
                        }
                      })));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* count */0,
              /* show : false */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action !== 0) {
        return /* Update */Block.__(0, [/* record */[
                    /* count */state[/* count */0],
                    /* show */1 - state[/* show */1]
                  ]]);
      } else {
        return /* Update */Block.__(0, [/* record */[
                    /* count */state[/* count */0] + 1 | 0,
                    /* show */state[/* show */1]
                  ]]);
      }
    });
  return newrecord;
}

var Query = 0;

exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
exports.FindOtherVideosQuery = FindOtherVideosQuery;
exports.viewCountOfPresentation = viewCountOfPresentation;
exports.renderPresentation = renderPresentation;
exports.component = component;
exports.Query = Query;
exports.make = make$1;
/* component Not a pure module */
